
import mafds.DamperSystem;


import tools.vitruv.methodologisttemplate.consistency.TotalMassReactionsHelper;
import tools.vitruv.methodologisttemplate.consistency.DampingRatioReactionsHelper;

import "http://www.example.org/mafds" as mafdsModel
import "http://www.example.org/uncertainty" as uncertaintyModel


reactions: mafds2mafds
in reaction to changes in mafdsModel
execute actions in mafdsModel


/* Reactions regarding the total mass */
reaction UpperTrussSphereMassChanged {
    after attribute replaced at mafdsModel::UpperTruss[sphereMassInKg] 
    call totalMassChanged("sphereMassInKg", newValue, oldValue, affectedEObject, affectedEObject.eContainer() as DamperSystem)
}

reaction UpperTrussCrossLinkMassChanged {
    after attribute replaced at mafdsModel::UpperTruss[crossLinkMassInKg] 
    call totalMassChanged("crossLinkMassInKg", newValue, oldValue, affectedEObject, affectedEObject.eContainer() as DamperSystem)
}

reaction UpperTrussRodNumberOfRodsChanged {
    after attribute replaced at mafdsModel::UpperTruss[numberOfThreadedRods] 
    call totalMassChangedMultipleCount(newValue, oldValue, affectedEObject.getMassOfThreadedRodInKg(), affectedEObject.eContainer() as DamperSystem)
}

reaction UpperTrussRodMassChanged {
    after attribute replaced at mafdsModel::UpperTruss[massOfThreadedRodInKg] 
    call totalMassChangedMultipleMass("massOfThreadedRodInKg", affectedEObject.getNumberOfThreadedRods(), newValue, oldValue, affectedEObject, affectedEObject.eContainer() as DamperSystem)
}

reaction GuidanceElementMassJointMiddlePartChanged {
    after attribute replaced at mafdsModel::GuidanceElement[massOfJointMiddlePartInKg] 
    call totalMassChanged("massOfJointMiddlePartInKg", newValue, oldValue, affectedEObject, affectedEObject.eContainer() as DamperSystem)
}

reaction GuidanceElementNumberOfArmsChanged {
    after attribute replaced at mafdsModel::GuidanceElement[numberOfArms] 
    call totalMassChangedMultipleCount(newValue, oldValue, affectedEObject.getMassOfArmInKg(), affectedEObject.eContainer() as DamperSystem)
}

reaction GuidanceElementMassOfArmChanged {
    after attribute replaced at mafdsModel::GuidanceElement[massOfArmInKg] 
    call totalMassChangedMultipleMass("massOfArmInKg", affectedEObject.getNumberOfArms(), newValue, oldValue, affectedEObject, affectedEObject.eContainer() as DamperSystem)
}

reaction SpringDamperSupportMassChanged {
    after attribute replaced at mafdsModel::SpringDamper[springSupportMassInKg] 
    call totalMassChanged("springSupportMassInKg", newValue, oldValue, affectedEObject, affectedEObject.eContainer() as DamperSystem)
}

reaction LowerTrussSphereMassChanged {
    after attribute replaced at mafdsModel::LowerTruss[sphereMassInKg] 
    call totalMassChanged("sphereMassInKg", newValue, oldValue, affectedEObject, affectedEObject.eContainer() as DamperSystem)
}

reaction LowerTrussRodMassChanged {
    after attribute replaced at mafdsModel::LowerTruss[massOfThreadedRodInKg] 
    call totalMassChangedMultipleMass("massOfThreadedRodInKg", affectedEObject.getNumberOfThreadedRods(), newValue, oldValue, affectedEObject, affectedEObject.eContainer() as DamperSystem)
}

reaction LowerTrussRodNumberOfRodsChanged {
    after attribute replaced at mafdsModel::LowerTruss[numberOfThreadedRods] 
    call totalMassChangedMultipleCount(newValue, oldValue, affectedEObject.getMassOfThreadedRodInKg(), affectedEObject.eContainer() as DamperSystem)
}


routine totalMassChangedMultipleMass(String parameterLocation, Integer count, Double massNew, Double massOld, EObject affectedEObject, mafdsModel::DamperSystem system) {
    match {
        val uncertaintyRepo = retrieve uncertaintyModel::UncertaintyAnnotationRepository corresponding to system.eContainer()
    }
    update {
        val uncertainty = TotalMassReactionsHelper.handleUncertaintyMultiple(uncertaintyRepo, parameterLocation, count, massNew, massOld, affectedEObject, system);
        if (uncertainty !== null) return;
        val delta = (massNew - massOld) * count;
        system.setTotalMassInKg(system.getTotalMassInKg() + delta);
    }
}

// example does not have uncertainty for count changes
routine totalMassChangedMultipleCount(Integer countNew, Integer countOld, Double mass, mafdsModel::DamperSystem system) {
    update {
        if (countOld === 0) return; // initial case don't fire twice (once for count, once for mass)
        val delta = (countNew - countOld) * mass;
        system.setTotalMassInKg(system.getTotalMassInKg() + delta);
    }
}


routine totalMassChanged(String parameterLocation, Double newValue, Double oldValue, EObject affectedEObject, mafdsModel::DamperSystem system) {
    match {
        val uncertaintyRepo = retrieve uncertaintyModel::UncertaintyAnnotationRepository corresponding to system.eContainer()
    }
    update {
        val uncertainty = TotalMassReactionsHelper.handleUncertainty(uncertaintyRepo, parameterLocation, oldValue, newValue, affectedEObject, system);
        if (uncertainty !== null) return;
        val delta = newValue - oldValue;
        system.setTotalMassInKg(system.getTotalMassInKg() + delta);
    }
}


/* Reactions regarding the damping ratio */
reaction totalMassChanged {
    after attribute replaced at mafdsModel::DamperSystem[totalMassInKg] 
    call recomputeDampingRatio(affectedEObject, "totalMassInKg", affectedEObject)
}

reaction springStiffnessChanged {
    after attribute replaced at mafdsModel::SpringDamper[stiffnessInNPerM] 
    call recomputeDampingRatio(affectedEObject.eContainer() as DamperSystem, "stiffnessInNPerM", affectedEObject)
}

reaction dampingConstantChanged {
    after attribute replaced at mafdsModel::SpringDamper[dampingConstantInNsPerM] 
    call recomputeDampingRatio(affectedEObject.eContainer() as DamperSystem, "dampingConstantInNsPerM", affectedEObject)
}

routine recomputeDampingRatio(mafdsModel::DamperSystem system, String parameterLocation, EObject affectedEObject) {
    match {
        val uncertaintyRepo = retrieve uncertaintyModel::UncertaintyAnnotationRepository corresponding to system.eContainer()
    }
    update {
        val uncertainty = DampingRatioReactionsHelper.handleUncertainty(uncertaintyRepo, system, parameterLocation, affectedEObject);
        if (uncertainty !== null) return;
        val dampingConstant = system.getSpringDamper().getDampingConstantInNsPerM()
        val springStiffness = system.getSpringDamper().getStiffnessInNPerM()
        system.setDampingRatio(dampingConstant / (2 * Math.sqrt(system.getTotalMassInKg() * springStiffness)));
    }
}