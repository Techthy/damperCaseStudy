
import java.io.File;
import java.util.List;

import uncertainty.UncertaintyAnnotationRepository;
import uncertainty.Uncertainty;
import uncertainty.UncertaintyLocation;
import uncertainty.UncertaintyFactory;
import uncertainty.OnDeleteMode;

import org.eclipse.emf.ecore.util.EcoreUtil;

import "http://www.example.org/uncertainty" as uncertaintyModel
import "http://www.example.org/mafds" as mafdsModel


reactions: uncertainty2uncertainty
in reaction to changes in uncertaintyModel
execute actions in uncertaintyModel

reaction UncertaintyInsertedAsRoot {
    after element uncertaintyModel::UncertaintyAnnotationRepository inserted as root
    call createAndRegisterRoots(newValue)
}


routine createAndRegisterRoots(uncertaintyModel::UncertaintyAnnotationRepository repo) {
    match {
        require absence of mafdsModel::DamperRepository corresponding to repo
    }
    create {
        val mDamperRepo = new mafdsModel::DamperRepository
    }
    update {
        persistProjectRelative(repo, mDamperRepo, new File("").toString() + "example.mafds")
        addCorrespondenceBetween(repo, mDamperRepo)
    }
}



reaction ReferenceInsertedIntoUncertaintyLocation {
    after element EObject inserted in uncertaintyModel::UncertaintyLocation[referencedComponents]
    call createCorrespondingUncertaintyReference(affectedEObject, newValue)
}
routine createCorrespondingUncertaintyReference(uncertaintyModel::UncertaintyLocation location, EObject referencedElement) {
    match {
        val correspondingReferenceList = retrieve many EObject corresponding to referencedElement
    }
    update {
        // get Container of UncertaintyLocation::Uncertainty sourceUncertainty = location.getContainer()
        // get Container of Uncertainty::UncertantyAnnotationRepository
        // get List of All Uncertanties::List[Uncertainty]
        // get List of All UncertantyLocations::Iterable[UncertaintyLocation]

        // listOfNewCorrespondingUncertainties = []

        // outer:
        // for corrElement in correspondingReferenceList:
        //      get Container of sourceUncertainty Uncertainty::UncertantyAnnotationRepository
        //      get List of All Uncertainties::List[Uncertainty]
        //      get List of All UncertaintyLocations::Iterable[UncertaintyLocation]

        //      uncertantiesWithSameLocation = uncertaintyLocations.filter(loc => loc.referencedComponents.equals(listOf(corrElement))
        //      if (uncertantiesWithSameLocation.isEmpty()) { newUncertainty= createNewUncertainty(corrElement, sourceUncertainty), continue, listOfNewCorrespondingUncertainties.add(newUncertainty) }
        //      else {
        //          for uncertantyWithSameLocation in uncertantiesWithSameLocation {
        //              if (uncertantyWithSameLocation.equals(sourceUncertainty) {
        //                  continue outer;
        //              }
        //          }
        //      }
        //      newUncertainty = createNewUncertainty(corrElement, sourceUncertainty)
        //      listOfNewCorrespondingUncertainties.add(newUncertainty)

        // ==========
        //  Xtend Code Implementation
        // =========

        // Retrieve all source elements
        val sourceUncertainty = location.eContainer() as Uncertainty;
        val sourceEffect = sourceUncertainty.getEffect();
        val sourcePattern = sourceUncertainty.getPattern();
        val sourcePerspective = sourceUncertainty.getPerspective();

        for (correspondingElement : correspondingReferenceList) {
            val annotationRepository = sourceUncertainty.eContainer() as UncertaintyAnnotationRepository; 
            val uncertaintyList = annotationRepository.uncertainties as List<Uncertainty>;
            val locationList = uncertaintyList.map[uncertaintyLocation].toList as List<UncertaintyLocation>;

            // question: is it correct that we also want to fetch a location that potentially links to more elements?
            val uncertaintyLocationsWithSameReference = locationList.filter[loc | loc.referencedComponents.contains(correspondingElement)];
            
            if (uncertaintyLocationsWithSameReference.isEmpty()) {
                // No matching UncertaintyLocation found -> create new Uncertainty and UncertaintyLocation
                // Create a new UncertaintyLocation
                val newUncertaintyLocation = UncertaintyFactory.eINSTANCE.createUncertaintyLocation();
                newUncertaintyLocation.getReferencedComponents.add(correspondingElement);
                newUncertaintyLocation.setLocation(location.getLocation());
                newUncertaintyLocation.setSpecification(location.getSpecification());
                
                val newEffect = UncertaintyFactory.eINSTANCE.createEffect();
                //newEffect.setSpecification(sourceEffect.getSpecification());
                newEffect.setRepresentation(sourceEffect.getRepresentation());
                newEffect.setStochasticity(sourceEffect.getStochasticity());

                val newPattern = UncertaintyFactory.eINSTANCE.createPattern();
                newPattern.setPatternType(sourcePattern.getPatternType());

                val newPerspective = UncertaintyFactory.eINSTANCE.createUncertaintyPerspective();
                newPerspective.setPerspective(sourcePerspective.getPerspective());
                newPerspective.setSpecification(sourcePerspective.getSpecification());

                // Create a new Uncertainty
                val newUncertainty = UncertaintyFactory.eINSTANCE.createUncertainty();
                newUncertainty.setKind(sourceUncertainty.getKind());
                newUncertainty.setReducability(sourceUncertainty.getReducability());
                newUncertainty.setNature(sourceUncertainty.getNature());
                newUncertainty.setUncertaintyLocation(newUncertaintyLocation);
                newUncertainty.setId(EcoreUtil.generateUUID());
                newUncertainty.setEffect(newEffect);
                newUncertainty.setPattern(newPattern);
                newUncertainty.setPerspective(newPerspective);
                newUncertainty.setOnDelete(sourceUncertainty.getOnDelete());

                //TODO: Remove
                //System.out.println("Source Uncertainty: " + sourceUncertainty.getId() + " with location: " + location.getLocation() + " and referenced elements: " + location.getReferencedComponents);
                //System.out.println("Created new Uncertainty " + newUncertainty.getId() + " for referenced element " + correspondingElement);
                
                addCorrespondenceBetween(newUncertainty, sourceUncertainty);
                annotationRepository.getUncertainties.add(newUncertainty);
            } else {   
                // Check if there is any existing Uncertainty that matches sourceUncertainty
                val existingMatch = uncertaintyLocationsWithSameReference.findFirst[ 
                    val containingUncertainty = eContainer as Uncertainty
                    containingUncertainty.kind == sourceUncertainty.kind &&
                    containingUncertainty.reducability == sourceUncertainty.reducability &&
                    containingUncertainty.nature == sourceUncertainty.nature &&
                    containingUncertainty.onDelete == sourceUncertainty.onDelete &&
                    // containingUncertainty.effect.specification == sourceEffect.specification &&
                    containingUncertainty.effect.representation == sourceEffect.representation &&
                    containingUncertainty.effect.stochasticity == sourceEffect.stochasticity &&
                    containingUncertainty.pattern.patternType == sourcePattern.patternType &&
                    containingUncertainty.perspective.perspective == sourcePerspective.perspective && 
                    containingUncertainty.perspective.specification == sourcePerspective.specification
                ]
                if (existingMatch === null) {
                        // Different Uncertainty found, create a new one and new UncertaintyLocation
                        val newUncertaintyLocation = UncertaintyFactory.eINSTANCE.createUncertaintyLocation();
                        newUncertaintyLocation.getReferencedComponents.add(correspondingElement);
                        newUncertaintyLocation.setLocation(location.getLocation());
                        newUncertaintyLocation.setSpecification(location.getSpecification());
                        
                        val newEffect = UncertaintyFactory.eINSTANCE.createEffect();
                        //needs to be handled by separate reaction (stoex)
                        //newEffect.setSpecification(sourceEffect.getSpecification());
                        newEffect.setRepresentation(sourceEffect.getRepresentation());
                        newEffect.setStochasticity(sourceEffect.getStochasticity());

                        val newPattern = UncertaintyFactory.eINSTANCE.createPattern();
                        newPattern.setPatternType(sourcePattern.getPatternType());

                        val newPerspective = UncertaintyFactory.eINSTANCE.createUncertaintyPerspective();
                        newPerspective.setPerspective(sourcePerspective.getPerspective());
                        newPerspective.setSpecification(sourcePerspective.getSpecification());

                        // Create a new Uncertainty
                        val newUncertainty = UncertaintyFactory.eINSTANCE.createUncertainty();
                        newUncertainty.setKind(sourceUncertainty.getKind());
                        newUncertainty.setReducability(sourceUncertainty.getReducability());
                        newUncertainty.setNature(sourceUncertainty.getNature());
                        newUncertainty.setUncertaintyLocation(newUncertaintyLocation);
                        newUncertainty.setId(EcoreUtil.generateUUID());
                        newUncertainty.setEffect(newEffect);
                        newUncertainty.setPattern(newPattern);
                        newUncertainty.setPerspective(newPerspective);
                        newUncertainty.setOnDelete(sourceUncertainty.getOnDelete());

                        addCorrespondenceBetween(newUncertainty, sourceUncertainty);
                        annotationRepository.getUncertainties.add(newUncertainty);
                }
            }            
        }
    }
}


reaction UncertaintyDeleted {
    after element uncertaintyModel::Uncertainty deleted
    call deleteCorrespondingUncertainties(affectedEObject)
}

routine deleteCorrespondingUncertainties(uncertaintyModel::Uncertainty sourceUncertainty) {
    match {
        val uncertaintiesList = retrieve many uncertaintyModel::Uncertainty corresponding to sourceUncertainty
    }
    update {
        // If there are no corresponding uncertainties: deletion of sourceUncertainty is allowed and no further action is needed
        if (uncertaintiesList.isEmpty()) {
                return;
        } 


        // DELETE MODE: No Action
        if (sourceUncertainty.getOnDelete() === OnDeleteMode.NO_ACTION) {
            System.out.println("[REACTION] Uncertainty deletion is set to NO_ACTION, no further action taken for: " + sourceUncertainty.getId());
            // No further uncertainties are deleted
            return;
        }

        // DELETE MODE: Restrict
        if (sourceUncertainty.getOnDelete() === OnDeleteMode.RESTRICT) {
            // readd the sourceUncertainty (as it is protected and there are corresponding references see above) 

            var allCorrespondingUncertaintiesManuallySet = true;
            for (correspondingUncertainty : uncertaintiesList) {
                if (!correspondingUncertainty.isSetManually()) {
                    allCorrespondingUncertaintiesManuallySet = false;
                }
            }
            
            if (allCorrespondingUncertaintiesManuallySet) {
                System.out.println("[REACTION] Uncertainty deletion is RESTRICT, but all corresponding uncertainties are set manually, no further action taken for: " + sourceUncertainty.getId());
                return;
            }

            // Since there must be at least one corresponding uncertainty we get the AnnotationRepository from this uncertainty b/c the reference of the sourceUncertainty is already unset
            val annotationRepository = uncertaintiesList.get(0).eContainer() as UncertaintyAnnotationRepository;
            annotationRepository.getUncertainties().add(sourceUncertainty);
            // restore correspondence
            for (correspondingUncertainty : uncertaintiesList) {
                addCorrespondenceBetween(sourceUncertainty, correspondingUncertainty);
            }

            System.out.println("[REACTION] Uncertainty deletion is RESTRICT, re-adding the source uncertainty: " + sourceUncertainty.getId());
            return;
        }

        // DELETE MODE: Cascade (default)


        for (correspondingUncertainty : uncertaintiesList) {
            if (!correspondingUncertainty.isSetManually()) {
                removeObject(correspondingUncertainty);
                removeCorrespondenceBetween(sourceUncertainty, correspondingUncertainty);
            }
        }
    }
}

reaction UncertaintyKindChanged {
    after attribute replaced at uncertaintyModel::Uncertainty[kind] 
    call updateUncertainties(affectedEObject)
}

reaction UncertaintyReducabilityChanged {
    after attribute replaced at uncertaintyModel::Uncertainty[reducability] 
    call updateUncertainties(affectedEObject)
}
reaction UncertaintyNatureChanged {
    after attribute replaced at uncertaintyModel::Uncertainty[nature] 
    call updateUncertainties(affectedEObject)
}

reaction UncertaintyOnDeleteChanged {
    after attribute replaced at uncertaintyModel::Uncertainty[onDelete] 
    call updateUncertainties(affectedEObject)
}



routine updateUncertainties(uncertaintyModel::Uncertainty sourceUncertainty){
    match {
        val uncertaintiesList = retrieve many uncertaintyModel::Uncertainty corresponding to sourceUncertainty
    }
    update {
        // Update all corresponding uncertainties with the new values from the sourceUncertainty
        for (correspondingUncertainty : uncertaintiesList) {
            // Other values have not changed but can be safely overwritten as they should be the same (CPR)
            correspondingUncertainty.setKind(sourceUncertainty.getKind());
            correspondingUncertainty.setReducability(sourceUncertainty.getReducability());
            correspondingUncertainty.setNature(sourceUncertainty.getNature());
            correspondingUncertainty.setOnDelete(sourceUncertainty.getOnDelete());
        }
    }
}

reaction PatternTypeChanged {
    after attribute replaced at uncertaintyModel::Pattern[patternType] 
    call patternTypeChangedRoutine(affectedEObject, affectedEObject.eContainer() as Uncertainty)
}


routine patternTypeChangedRoutine(uncertaintyModel::Pattern pattern, uncertaintyModel::Uncertainty sourceUncertainty) {
    match {
        val uncertaintiesList = retrieve many uncertaintyModel::Uncertainty corresponding to sourceUncertainty
    }
    update {
        // Update all corresponding uncertainties with the new values from the sourceUncertainty
        for (correspondingUncertainty : uncertaintiesList) {
            correspondingUncertainty.getPattern().setPatternType(sourceUncertainty.getPattern().getPatternType());
        }
    }
}

reaction UncertainyPerspectiveChanged {
    after attribute replaced at uncertaintyModel::UncertaintyPerspective[perspective] 
    call perspectiveChangedRoutine(affectedEObject, affectedEObject.eContainer() as Uncertainty)
}

reaction UncertaintySpecificationChanged {
    after attribute replaced at uncertaintyModel::UncertaintyPerspective[specification] 
    call perspectiveChangedRoutine(affectedEObject, affectedEObject.eContainer() as Uncertainty)
}

routine perspectiveChangedRoutine(uncertaintyModel::UncertaintyPerspective perspective, uncertaintyModel::Uncertainty sourceUncertainty) {
    match {
        val uncertaintiesList = retrieve many uncertaintyModel::Uncertainty corresponding to sourceUncertainty
    }
    update {
        // Update all corresponding uncertainties with the new values from the sourceUncertainty
        for (correspondingUncertainty : uncertaintiesList) {
            correspondingUncertainty.getPerspective().setPerspective(sourceUncertainty.getPerspective().getPerspective());
            correspondingUncertainty.getPerspective().setSpecification(sourceUncertainty.getPerspective().getSpecification());
        }
    }
}

//reaction UncertaintyEffectSpecificationChanged {
//    after attribute replaced at uncertaintyModel::Effect[specification] 
//    call effectChangedRoutine(affectedEObject, affectedEObject.eContainer() as Uncertainty)
//}

reaction UncertaintyEffectRepresentationChanged {
    after attribute replaced at uncertaintyModel::Effect[representation] 
    call effectChangedRoutine(affectedEObject, affectedEObject.eContainer() as Uncertainty)
}

reaction UncertaintyEffectStochasticityChanged {
    after attribute replaced at uncertaintyModel::Effect[stochasticity] 
    call effectChangedRoutine(affectedEObject, affectedEObject.eContainer() as Uncertainty)
}

routine effectChangedRoutine(uncertaintyModel::Effect effect, uncertaintyModel::Uncertainty sourceUncertainty) {
    match {
        val uncertaintiesList = retrieve many uncertaintyModel::Uncertainty corresponding to sourceUncertainty
    }
    update {
        // Update all corresponding uncertainties with the new values from the sourceUncertainty
        for (correspondingUncertainty : uncertaintiesList) {
            // correspondingUncertainty.getEffect().setSpecification(sourceUncertainty.getEffect().getSpecification());
            correspondingUncertainty.getEffect().setRepresentation(sourceUncertainty.getEffect().getRepresentation());
            correspondingUncertainty.getEffect().setStochasticity(sourceUncertainty.getEffect().getStochasticity());
        }
    }
}

reaction UncertaintyLocationSpecificationChanged {
    after attribute replaced at uncertaintyModel::UncertaintyLocation[specification] 
    call locationChangedRoutine(affectedEObject, affectedEObject.eContainer() as Uncertainty)
}

reaction UncertaintyLocationLocationChanged {
    after attribute replaced at uncertaintyModel::UncertaintyLocation[location] 
    call locationChangedRoutine(affectedEObject, affectedEObject.eContainer() as Uncertainty)
}

routine locationChangedRoutine(uncertaintyModel::UncertaintyLocation location, uncertaintyModel::Uncertainty sourceUncertainty) {
    match {
        val uncertaintiesList = retrieve many uncertaintyModel::Uncertainty corresponding to sourceUncertainty
    }
    update {
        // Update all corresponding uncertainties with the new values from the sourceUncertainty
        for (correspondingUncertainty : uncertaintiesList) {
            //correspondingUncertainty.getUncertaintyLocation().setSpecification(location.getSpecification());
            correspondingUncertainty.getUncertaintyLocation().setLocation(location.getLocation());
        }
    }
}



